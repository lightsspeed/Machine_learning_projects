# -*- coding: utf-8 -*-
"""Diabetes_prediction.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNWBdQQLAWwOtZAsgp051HAerSrgUho-
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis (PIMA Diabetes Dataset)"""

#Loading the diabetes dataset to a pandas dataframe

diabetes_dataset = pd.read_csv("diabetes.csv")
#pd.read_csv?

# printing the first 5 rows of dataset
diabetes_dataset.head()

#number of rows and cols in dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe().round(2)

diabetes_dataset['Outcome'].value_counts()

"""0 = NonDiabetic
1 = Diabetic
"""

diabetes_dataset.groupby('Outcome').mean().round(2)

# separting data and labels

X = diabetes_dataset.drop(columns= 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Data Standardization - Most important Step"""

scaler = StandardScaler()

scaler.fit(X)

standardize_data = scaler.transform(X)
print(standardize_data)

X = standardize_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify = Y, random_state=2)

print(X.shape, X_train.shape , X_test.shape)
print(Y.shape, Y_train.shape , Y_test.shape)

"""TRAINING THE MODEL"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine (svm) Classifier

classifier.fit(X_train, Y_train)

#Model Evualation -> Accuracy Score

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print(f'Accuracy score of the training data: , {training_data_accuracy:.5f}')

#Model Evualation -> Accuracy Score

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(f'Accuracy score of the test data: , {test_data_accuracy:.5f}')

#making a predictive system

input_data = (5,166,72,19,175,25.8,0.587,51)

#changing the input data to numpy array

input_data_as_numpy_array = np.asarray(input_data)

#reshaping the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

#standardizing the input data
std_data = scaler.transform(input_data_reshaped)

print(std_data)

prediction = classifier.predict(std_data)

print(prediction)

if (prediction[0] == 0):
  print('The person is non-diabetec')
else:
  print('The person is diabetec')